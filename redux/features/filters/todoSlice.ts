import { createSlice, PayloadAction, nanoid } from '@reduxjs/toolkit'

// Define the Todo type
export interface Todo {
  id: string // Using string for the ID (generated by nanoid or backend)
  text: string
  completed: boolean
}

// Define the initial state as an array of todos (not just one todo)
const initialState: Todo[] = []

// Create the todo slice
export const todoSlice = createSlice({
  name: 'todos',
  initialState,
  reducers: {
    addTodo: {
      reducer: (state, action: PayloadAction<Todo>) => {
        state.push(action.payload) // Add the new todo to the array
      },
      prepare: (text: string) => ({
        payload: {
          id: nanoid(), // Generate a unique ID for the new todo (or use the backend-generated ID)
          text,
          completed: false,
        },
      }),
    },
    toggleTodo: (state, action: PayloadAction<string>) => {
      // Toggle the completed status of a todo based on its ID
      const todo = state.find(todo => todo.id === action.payload)
      if (todo) {
        todo.completed = !todo.completed
      }
    },
    deleteTodo: (state, action: PayloadAction<string>) => {
      // Remove the todo from the list by its ID
      return state.filter(todo => todo.id !== action.payload)
    },
    editTodo: (state, action: PayloadAction<{ id: string; text: string }>) => {
      // Edit the text of a todo by its ID
      const todo = state.find(todo => todo.id === action.payload.id)
      if (todo) {
        todo.text = action.payload.text
      }
    },
    setTodos: (state, action: PayloadAction<Todo[]>) => {
      // Set the entire list of todos from the backend
      return action.payload
    },
  },
})

// Export the action creators
export const { addTodo, toggleTodo, deleteTodo, editTodo, setTodos } = todoSlice.actions

// Export the reducer
export default todoSlice.reducer

// Select the todos state from the RootState
export const selectTodos = (state: RootState) => state.todos

// Define the RootState type (the entire Redux state)
export interface RootState {
  todos: Todo[]
}
